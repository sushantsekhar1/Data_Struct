class SinglyLinkedList {
    // Node definition
    static class Node {
        int data;
        Node next;
        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    Node head;

    // 1. Insert at beginning
    void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // 2. Insert at end
    void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) temp = temp.next;
        temp.next = newNode;
    }

    // 3. Insert at position
    void insertAtPosition(int data, int pos) {
        Node newNode = new Node(data);
        if (pos == 0) {
            newNode.next = head;
            head = newNode;
            return;
        }
        Node temp = head;
        for (int i = 1; i < pos && temp != null; i++) temp = temp.next;
        if (temp == null) return;
        newNode.next = temp.next;
        temp.next = newNode;
    }

    // 4. Delete from beginning
    void deleteFromBeginning() {
        if (head != null) head = head.next;
    }

    // 5. Delete from end
    void deleteFromEnd() {
        if (head == null || head.next == null) {
            head = null;
            return;
        }
        Node temp = head;
        while (temp.next.next != null) temp = temp.next;
        temp.next = null;
    }

    // 6. Delete from position
    void deleteFromPosition(int pos) {
        if (pos == 0 && head != null) {
            head = head.next;
            return;
        }
        Node temp = head;
        for (int i = 1; i < pos && temp != null; i++) temp = temp.next;
        if (temp == null || temp.next == null) return;
        temp.next = temp.next.next;
    }

    // 7. Search for a value
    boolean search(int key) {
        Node temp = head;
        while (temp != null) {
            if (temp.data == key) return true;
            temp = temp.next;
        }
        return false;
    }

    // 8. Display/Traverse the list
    void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    // 9. Find length (iterative)
    int lengthIterative() {
        int count = 0;
        Node temp = head;
        while (temp != null) {
            count++;
            temp = temp.next;
        }
        return count;
    }

    // 10. Find length (recursive)
    int lengthRecursive(Node node) {
        if (node == null) return 0;
        return 1 + lengthRecursive(node.next);
    }

    // 11. Reverse a linked list (iterative)
    void reverseIterative() {
        Node prev = null, current = head, next;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        head = prev;
    }

    // 12. Reverse (recursive)
    Node reverseRecursive(Node node) {
        if (node == null || node.next == null) return node;
        Node rest = reverseRecursive(node.next);
        node.next.next = node;
        node.next = null;
        return rest;
    }

    // 13. Find middle of list
    int findMiddle() {
        Node slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return (slow != null) ? slow.data : -1;
    }

    // 14. Nth node from end
    int nthFromEnd(int n) {
        Node first = head, second = head;
        for (int i = 0; i < n; i++) {
            if (second == null) return -1;
            second = second.next;
        }
        while (second != null) {
            first = first.next;
            second = second.next;
        }
        return first != null ? first.data : -1;
    }

    // 15. Detect loop
    boolean detectLoop() {
        Node slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) return true;
        }
        return false;
    }

    // 16. Remove loop
    void removeLoop() {
        Node slow = head, fast = head;
        boolean loopExists = false;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                loopExists = true;
                break;
            }
        }
        if (!loopExists) return;

        slow = head;
        while (slow.next != fast.next) {
            slow = slow.next;
            fast = fast.next;
        }
        fast.next = null;
    }

    // 17. Check palindrome
    boolean isPalindrome() {
        if (head == null || head.next == null) return true;
        Node slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        Node secondHalf = reverseRecursive(slow);
        Node firstHalf = head;

        while (secondHalf != null) {
            if (firstHalf.data != secondHalf.data) return false;
            firstHalf = firstHalf.next;
            secondHalf = secondHalf.next;
        }
        return true;
    }

    // 18. Merge two sorted lists
    static Node mergeSortedLists(Node a, Node b) {
        if (a == null) return b;
        if (b == null) return a;
        if (a.data < b.data) {
            a.next = mergeSortedLists(a.next, b);
            return a;
        } else {
            b.next = mergeSortedLists(a, b.next);
            return b;
        }
    }

    // 19. Merge sort on linked list
    Node mergeSort(Node h) {
        if (h == null || h.next == null) return h;
        Node middle = getMiddle(h);
        Node nextOfMiddle = middle.next;
        middle.next = null;

        Node left = mergeSort(h);
        Node right = mergeSort(nextOfMiddle);

        return mergeSortedLists(left, right);
    }

    Node getMiddle(Node h) {
        if (h == null) return h;
        Node slow = h, fast = h.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    // 20. Remove duplicates from sorted list
    void removeDuplicates() {
        Node curr = head;
        while (curr != null && curr.next != null) {
            if (curr.data == curr.next.data) {
                curr.next = curr.next.next;
            } else {
                curr = curr.next;
            }
        }
    }

    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();
        list.insertAtEnd(1);
        list.insertAtEnd(2);
        list.insertAtEnd(2);
        list.insertAtEnd(3);
        list.insertAtEnd(4);
        list.insertAtEnd(4);
        list.insertAtEnd(5);

        System.out.println("Original list:");
        list.display();

        System.out.println("Length (iterative): " + list.lengthIterative());
        System.out.println("Length (recursive): " + list.lengthRecursive(list.head));
        System.out.println("Middle element: " + list.findMiddle());
        System.out.println("3rd element from end: " + list.nthFromEnd(3));

        System.out.println("Reversed list (iterative):");
        list.reverseIterative();
        list.display();

        System.out.println("Removing duplicates:");
        list.removeDuplicates();
        list.display();

        System.out.println("Sorted using merge sort:");
        list.head = list.mergeSort(list.head);
        list.display();
    }
}
